// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/orchestrator_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Orchestrator_ProcessQuery_FullMethodName             = "/api.orchestrator.v1.Orchestrator/ProcessQuery"
	Orchestrator_ExecuteWorkflow_FullMethodName          = "/api.orchestrator.v1.Orchestrator/ExecuteWorkflow"
	Orchestrator_ExecuteWorkflowAsync_FullMethodName     = "/api.orchestrator.v1.Orchestrator/ExecuteWorkflowAsync"
	Orchestrator_GetWorkflowStatus_FullMethodName        = "/api.orchestrator.v1.Orchestrator/GetWorkflowStatus"
	Orchestrator_CancelWorkflow_FullMethodName           = "/api.orchestrator.v1.Orchestrator/CancelWorkflow"
	Orchestrator_CreateWorkflowDefinition_FullMethodName = "/api.orchestrator.v1.Orchestrator/CreateWorkflowDefinition"
	Orchestrator_GetWorkflowDefinition_FullMethodName    = "/api.orchestrator.v1.Orchestrator/GetWorkflowDefinition"
	Orchestrator_ListWorkflowDefinitions_FullMethodName  = "/api.orchestrator.v1.Orchestrator/ListWorkflowDefinitions"
	Orchestrator_UpdateWorkflowDefinition_FullMethodName = "/api.orchestrator.v1.Orchestrator/UpdateWorkflowDefinition"
	Orchestrator_GetServicesHealth_FullMethodName        = "/api.orchestrator.v1.Orchestrator/GetServicesHealth"
	Orchestrator_HealthCheck_FullMethodName              = "/api.orchestrator.v1.Orchestrator/HealthCheck"
)

// OrchestratorClient is the client API for Orchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Orchestrator服务 - 工作流编排和服务协调
type OrchestratorClient interface {
	// 处理查询请求
	ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...grpc.CallOption) (*ProcessQueryResponse, error)
	// 执行工作流
	ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest, opts ...grpc.CallOption) (*ExecuteWorkflowResponse, error)
	// 异步执行工作流
	ExecuteWorkflowAsync(ctx context.Context, in *ExecuteWorkflowAsyncRequest, opts ...grpc.CallOption) (*ExecuteWorkflowAsyncResponse, error)
	// 获取工作流状态
	GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error)
	// 取消工作流
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
	// 创建工作流定义
	CreateWorkflowDefinition(ctx context.Context, in *CreateWorkflowDefinitionRequest, opts ...grpc.CallOption) (*CreateWorkflowDefinitionResponse, error)
	// 获取工作流定义
	GetWorkflowDefinition(ctx context.Context, in *GetWorkflowDefinitionRequest, opts ...grpc.CallOption) (*GetWorkflowDefinitionResponse, error)
	// 列出工作流定义
	ListWorkflowDefinitions(ctx context.Context, in *ListWorkflowDefinitionsRequest, opts ...grpc.CallOption) (*ListWorkflowDefinitionsResponse, error)
	// 更新工作流定义
	UpdateWorkflowDefinition(ctx context.Context, in *UpdateWorkflowDefinitionRequest, opts ...grpc.CallOption) (*UpdateWorkflowDefinitionResponse, error)
	// 获取服务健康状态
	GetServicesHealth(ctx context.Context, in *GetServicesHealthRequest, opts ...grpc.CallOption) (*GetServicesHealthResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type orchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestratorClient(cc grpc.ClientConnInterface) OrchestratorClient {
	return &orchestratorClient{cc}
}

func (c *orchestratorClient) ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...grpc.CallOption) (*ProcessQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessQueryResponse)
	err := c.cc.Invoke(ctx, Orchestrator_ProcessQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest, opts ...grpc.CallOption) (*ExecuteWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteWorkflowResponse)
	err := c.cc.Invoke(ctx, Orchestrator_ExecuteWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ExecuteWorkflowAsync(ctx context.Context, in *ExecuteWorkflowAsyncRequest, opts ...grpc.CallOption) (*ExecuteWorkflowAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteWorkflowAsyncResponse)
	err := c.cc.Invoke(ctx, Orchestrator_ExecuteWorkflowAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowStatusResponse)
	err := c.cc.Invoke(ctx, Orchestrator_GetWorkflowStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWorkflowResponse)
	err := c.cc.Invoke(ctx, Orchestrator_CancelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) CreateWorkflowDefinition(ctx context.Context, in *CreateWorkflowDefinitionRequest, opts ...grpc.CallOption) (*CreateWorkflowDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWorkflowDefinitionResponse)
	err := c.cc.Invoke(ctx, Orchestrator_CreateWorkflowDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetWorkflowDefinition(ctx context.Context, in *GetWorkflowDefinitionRequest, opts ...grpc.CallOption) (*GetWorkflowDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowDefinitionResponse)
	err := c.cc.Invoke(ctx, Orchestrator_GetWorkflowDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) ListWorkflowDefinitions(ctx context.Context, in *ListWorkflowDefinitionsRequest, opts ...grpc.CallOption) (*ListWorkflowDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowDefinitionsResponse)
	err := c.cc.Invoke(ctx, Orchestrator_ListWorkflowDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) UpdateWorkflowDefinition(ctx context.Context, in *UpdateWorkflowDefinitionRequest, opts ...grpc.CallOption) (*UpdateWorkflowDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkflowDefinitionResponse)
	err := c.cc.Invoke(ctx, Orchestrator_UpdateWorkflowDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) GetServicesHealth(ctx context.Context, in *GetServicesHealthRequest, opts ...grpc.CallOption) (*GetServicesHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesHealthResponse)
	err := c.cc.Invoke(ctx, Orchestrator_GetServicesHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestratorClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Orchestrator_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestratorServer is the server API for Orchestrator service.
// All implementations must embed UnimplementedOrchestratorServer
// for forward compatibility.
//
// Orchestrator服务 - 工作流编排和服务协调
type OrchestratorServer interface {
	// 处理查询请求
	ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error)
	// 执行工作流
	ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error)
	// 异步执行工作流
	ExecuteWorkflowAsync(context.Context, *ExecuteWorkflowAsyncRequest) (*ExecuteWorkflowAsyncResponse, error)
	// 获取工作流状态
	GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*GetWorkflowStatusResponse, error)
	// 取消工作流
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	// 创建工作流定义
	CreateWorkflowDefinition(context.Context, *CreateWorkflowDefinitionRequest) (*CreateWorkflowDefinitionResponse, error)
	// 获取工作流定义
	GetWorkflowDefinition(context.Context, *GetWorkflowDefinitionRequest) (*GetWorkflowDefinitionResponse, error)
	// 列出工作流定义
	ListWorkflowDefinitions(context.Context, *ListWorkflowDefinitionsRequest) (*ListWorkflowDefinitionsResponse, error)
	// 更新工作流定义
	UpdateWorkflowDefinition(context.Context, *UpdateWorkflowDefinitionRequest) (*UpdateWorkflowDefinitionResponse, error)
	// 获取服务健康状态
	GetServicesHealth(context.Context, *GetServicesHealthRequest) (*GetServicesHealthResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedOrchestratorServer()
}

// UnimplementedOrchestratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrchestratorServer struct{}

func (UnimplementedOrchestratorServer) ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessQuery not implemented")
}
func (UnimplementedOrchestratorServer) ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWorkflow not implemented")
}
func (UnimplementedOrchestratorServer) ExecuteWorkflowAsync(context.Context, *ExecuteWorkflowAsyncRequest) (*ExecuteWorkflowAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWorkflowAsync not implemented")
}
func (UnimplementedOrchestratorServer) GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*GetWorkflowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowStatus not implemented")
}
func (UnimplementedOrchestratorServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (UnimplementedOrchestratorServer) CreateWorkflowDefinition(context.Context, *CreateWorkflowDefinitionRequest) (*CreateWorkflowDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowDefinition not implemented")
}
func (UnimplementedOrchestratorServer) GetWorkflowDefinition(context.Context, *GetWorkflowDefinitionRequest) (*GetWorkflowDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowDefinition not implemented")
}
func (UnimplementedOrchestratorServer) ListWorkflowDefinitions(context.Context, *ListWorkflowDefinitionsRequest) (*ListWorkflowDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowDefinitions not implemented")
}
func (UnimplementedOrchestratorServer) UpdateWorkflowDefinition(context.Context, *UpdateWorkflowDefinitionRequest) (*UpdateWorkflowDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowDefinition not implemented")
}
func (UnimplementedOrchestratorServer) GetServicesHealth(context.Context, *GetServicesHealthRequest) (*GetServicesHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesHealth not implemented")
}
func (UnimplementedOrchestratorServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedOrchestratorServer) mustEmbedUnimplementedOrchestratorServer() {}
func (UnimplementedOrchestratorServer) testEmbeddedByValue()                      {}

// UnsafeOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestratorServer will
// result in compilation errors.
type UnsafeOrchestratorServer interface {
	mustEmbedUnimplementedOrchestratorServer()
}

func RegisterOrchestratorServer(s grpc.ServiceRegistrar, srv OrchestratorServer) {
	// If the following call pancis, it indicates UnimplementedOrchestratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Orchestrator_ServiceDesc, srv)
}

func _Orchestrator_ProcessQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ProcessQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ProcessQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ProcessQuery(ctx, req.(*ProcessQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ExecuteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ExecuteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ExecuteWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ExecuteWorkflow(ctx, req.(*ExecuteWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ExecuteWorkflowAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWorkflowAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ExecuteWorkflowAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ExecuteWorkflowAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ExecuteWorkflowAsync(ctx, req.(*ExecuteWorkflowAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetWorkflowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetWorkflowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetWorkflowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetWorkflowStatus(ctx, req.(*GetWorkflowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_CancelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_CreateWorkflowDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).CreateWorkflowDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_CreateWorkflowDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).CreateWorkflowDefinition(ctx, req.(*CreateWorkflowDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetWorkflowDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetWorkflowDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetWorkflowDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetWorkflowDefinition(ctx, req.(*GetWorkflowDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_ListWorkflowDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).ListWorkflowDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_ListWorkflowDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).ListWorkflowDefinitions(ctx, req.(*ListWorkflowDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_UpdateWorkflowDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).UpdateWorkflowDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_UpdateWorkflowDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).UpdateWorkflowDefinition(ctx, req.(*UpdateWorkflowDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_GetServicesHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).GetServicesHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_GetServicesHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).GetServicesHealth(ctx, req.(*GetServicesHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orchestrator_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestratorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Orchestrator_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestratorServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Orchestrator_ServiceDesc is the grpc.ServiceDesc for Orchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.orchestrator.v1.Orchestrator",
	HandlerType: (*OrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessQuery",
			Handler:    _Orchestrator_ProcessQuery_Handler,
		},
		{
			MethodName: "ExecuteWorkflow",
			Handler:    _Orchestrator_ExecuteWorkflow_Handler,
		},
		{
			MethodName: "ExecuteWorkflowAsync",
			Handler:    _Orchestrator_ExecuteWorkflowAsync_Handler,
		},
		{
			MethodName: "GetWorkflowStatus",
			Handler:    _Orchestrator_GetWorkflowStatus_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _Orchestrator_CancelWorkflow_Handler,
		},
		{
			MethodName: "CreateWorkflowDefinition",
			Handler:    _Orchestrator_CreateWorkflowDefinition_Handler,
		},
		{
			MethodName: "GetWorkflowDefinition",
			Handler:    _Orchestrator_GetWorkflowDefinition_Handler,
		},
		{
			MethodName: "ListWorkflowDefinitions",
			Handler:    _Orchestrator_ListWorkflowDefinitions_Handler,
		},
		{
			MethodName: "UpdateWorkflowDefinition",
			Handler:    _Orchestrator_UpdateWorkflowDefinition_Handler,
		},
		{
			MethodName: "GetServicesHealth",
			Handler:    _Orchestrator_GetServicesHealth_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Orchestrator_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/orchestrator_svc.proto",
}
