// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: v1/orchestrator_svc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrchestratorCancelWorkflow = "/api.orchestrator.v1.Orchestrator/CancelWorkflow"
const OperationOrchestratorCreateWorkflowDefinition = "/api.orchestrator.v1.Orchestrator/CreateWorkflowDefinition"
const OperationOrchestratorExecuteWorkflow = "/api.orchestrator.v1.Orchestrator/ExecuteWorkflow"
const OperationOrchestratorExecuteWorkflowAsync = "/api.orchestrator.v1.Orchestrator/ExecuteWorkflowAsync"
const OperationOrchestratorGetServicesHealth = "/api.orchestrator.v1.Orchestrator/GetServicesHealth"
const OperationOrchestratorGetWorkflowDefinition = "/api.orchestrator.v1.Orchestrator/GetWorkflowDefinition"
const OperationOrchestratorGetWorkflowStatus = "/api.orchestrator.v1.Orchestrator/GetWorkflowStatus"
const OperationOrchestratorHealthCheck = "/api.orchestrator.v1.Orchestrator/HealthCheck"
const OperationOrchestratorListWorkflowDefinitions = "/api.orchestrator.v1.Orchestrator/ListWorkflowDefinitions"
const OperationOrchestratorProcessQuery = "/api.orchestrator.v1.Orchestrator/ProcessQuery"
const OperationOrchestratorUpdateWorkflowDefinition = "/api.orchestrator.v1.Orchestrator/UpdateWorkflowDefinition"

type OrchestratorHTTPServer interface {
	// CancelWorkflow 取消工作流
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	// CreateWorkflowDefinition 创建工作流定义
	CreateWorkflowDefinition(context.Context, *CreateWorkflowDefinitionRequest) (*CreateWorkflowDefinitionResponse, error)
	// ExecuteWorkflow 执行工作流
	ExecuteWorkflow(context.Context, *ExecuteWorkflowRequest) (*ExecuteWorkflowResponse, error)
	// ExecuteWorkflowAsync 异步执行工作流
	ExecuteWorkflowAsync(context.Context, *ExecuteWorkflowAsyncRequest) (*ExecuteWorkflowAsyncResponse, error)
	// GetServicesHealth 获取服务健康状态
	GetServicesHealth(context.Context, *GetServicesHealthRequest) (*GetServicesHealthResponse, error)
	// GetWorkflowDefinition 获取工作流定义
	GetWorkflowDefinition(context.Context, *GetWorkflowDefinitionRequest) (*GetWorkflowDefinitionResponse, error)
	// GetWorkflowStatus 获取工作流状态
	GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*GetWorkflowStatusResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	// ListWorkflowDefinitions 列出工作流定义
	ListWorkflowDefinitions(context.Context, *ListWorkflowDefinitionsRequest) (*ListWorkflowDefinitionsResponse, error)
	// ProcessQuery 处理查询请求
	ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error)
	// UpdateWorkflowDefinition 更新工作流定义
	UpdateWorkflowDefinition(context.Context, *UpdateWorkflowDefinitionRequest) (*UpdateWorkflowDefinitionResponse, error)
}

func RegisterOrchestratorHTTPServer(s *http.Server, srv OrchestratorHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/process/query", _Orchestrator_ProcessQuery0_HTTP_Handler(srv))
	r.POST("/v1/workflows/execute", _Orchestrator_ExecuteWorkflow0_HTTP_Handler(srv))
	r.POST("/v1/workflows/execute-async", _Orchestrator_ExecuteWorkflowAsync0_HTTP_Handler(srv))
	r.GET("/v1/workflows/{workflow_id}/status", _Orchestrator_GetWorkflowStatus0_HTTP_Handler(srv))
	r.POST("/v1/workflows/{workflow_id}/cancel", _Orchestrator_CancelWorkflow0_HTTP_Handler(srv))
	r.POST("/v1/workflows/definitions", _Orchestrator_CreateWorkflowDefinition0_HTTP_Handler(srv))
	r.GET("/v1/workflows/definitions/{definition_id}", _Orchestrator_GetWorkflowDefinition0_HTTP_Handler(srv))
	r.GET("/v1/workflows/definitions", _Orchestrator_ListWorkflowDefinitions0_HTTP_Handler(srv))
	r.PUT("/v1/workflows/definitions/{definition_id}", _Orchestrator_UpdateWorkflowDefinition0_HTTP_Handler(srv))
	r.GET("/v1/services/health", _Orchestrator_GetServicesHealth0_HTTP_Handler(srv))
	r.GET("/v1/health", _Orchestrator_HealthCheck0_HTTP_Handler(srv))
}

func _Orchestrator_ProcessQuery0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorProcessQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessQuery(ctx, req.(*ProcessQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessQueryResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_ExecuteWorkflow0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExecuteWorkflowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorExecuteWorkflow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecuteWorkflow(ctx, req.(*ExecuteWorkflowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExecuteWorkflowResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_ExecuteWorkflowAsync0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExecuteWorkflowAsyncRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorExecuteWorkflowAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExecuteWorkflowAsync(ctx, req.(*ExecuteWorkflowAsyncRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExecuteWorkflowAsyncResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_GetWorkflowStatus0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkflowStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorGetWorkflowStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkflowStatus(ctx, req.(*GetWorkflowStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkflowStatusResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_CancelWorkflow0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelWorkflowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorCancelWorkflow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelWorkflowResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_CreateWorkflowDefinition0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWorkflowDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorCreateWorkflowDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWorkflowDefinition(ctx, req.(*CreateWorkflowDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWorkflowDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_GetWorkflowDefinition0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWorkflowDefinitionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorGetWorkflowDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWorkflowDefinition(ctx, req.(*GetWorkflowDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWorkflowDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_ListWorkflowDefinitions0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWorkflowDefinitionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorListWorkflowDefinitions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWorkflowDefinitions(ctx, req.(*ListWorkflowDefinitionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWorkflowDefinitionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_UpdateWorkflowDefinition0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateWorkflowDefinitionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorUpdateWorkflowDefinition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateWorkflowDefinition(ctx, req.(*UpdateWorkflowDefinitionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateWorkflowDefinitionResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_GetServicesHealth0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServicesHealthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorGetServicesHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServicesHealth(ctx, req.(*GetServicesHealthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetServicesHealthResponse)
		return ctx.Result(200, reply)
	}
}

func _Orchestrator_HealthCheck0_HTTP_Handler(srv OrchestratorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrchestratorHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type OrchestratorHTTPClient interface {
	// CancelWorkflow 取消工作流
	CancelWorkflow(ctx context.Context, req *CancelWorkflowRequest, opts ...http.CallOption) (rsp *CancelWorkflowResponse, err error)
	// CreateWorkflowDefinition 创建工作流定义
	CreateWorkflowDefinition(ctx context.Context, req *CreateWorkflowDefinitionRequest, opts ...http.CallOption) (rsp *CreateWorkflowDefinitionResponse, err error)
	// ExecuteWorkflow 执行工作流
	ExecuteWorkflow(ctx context.Context, req *ExecuteWorkflowRequest, opts ...http.CallOption) (rsp *ExecuteWorkflowResponse, err error)
	// ExecuteWorkflowAsync 异步执行工作流
	ExecuteWorkflowAsync(ctx context.Context, req *ExecuteWorkflowAsyncRequest, opts ...http.CallOption) (rsp *ExecuteWorkflowAsyncResponse, err error)
	// GetServicesHealth 获取服务健康状态
	GetServicesHealth(ctx context.Context, req *GetServicesHealthRequest, opts ...http.CallOption) (rsp *GetServicesHealthResponse, err error)
	// GetWorkflowDefinition 获取工作流定义
	GetWorkflowDefinition(ctx context.Context, req *GetWorkflowDefinitionRequest, opts ...http.CallOption) (rsp *GetWorkflowDefinitionResponse, err error)
	// GetWorkflowStatus 获取工作流状态
	GetWorkflowStatus(ctx context.Context, req *GetWorkflowStatusRequest, opts ...http.CallOption) (rsp *GetWorkflowStatusResponse, err error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.HealthCheckResponse, err error)
	// ListWorkflowDefinitions 列出工作流定义
	ListWorkflowDefinitions(ctx context.Context, req *ListWorkflowDefinitionsRequest, opts ...http.CallOption) (rsp *ListWorkflowDefinitionsResponse, err error)
	// ProcessQuery 处理查询请求
	ProcessQuery(ctx context.Context, req *ProcessQueryRequest, opts ...http.CallOption) (rsp *ProcessQueryResponse, err error)
	// UpdateWorkflowDefinition 更新工作流定义
	UpdateWorkflowDefinition(ctx context.Context, req *UpdateWorkflowDefinitionRequest, opts ...http.CallOption) (rsp *UpdateWorkflowDefinitionResponse, err error)
}

type OrchestratorHTTPClientImpl struct {
	cc *http.Client
}

func NewOrchestratorHTTPClient(client *http.Client) OrchestratorHTTPClient {
	return &OrchestratorHTTPClientImpl{client}
}

// CancelWorkflow 取消工作流
func (c *OrchestratorHTTPClientImpl) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...http.CallOption) (*CancelWorkflowResponse, error) {
	var out CancelWorkflowResponse
	pattern := "/v1/workflows/{workflow_id}/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorCancelWorkflow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// CreateWorkflowDefinition 创建工作流定义
func (c *OrchestratorHTTPClientImpl) CreateWorkflowDefinition(ctx context.Context, in *CreateWorkflowDefinitionRequest, opts ...http.CallOption) (*CreateWorkflowDefinitionResponse, error) {
	var out CreateWorkflowDefinitionResponse
	pattern := "/v1/workflows/definitions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorCreateWorkflowDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ExecuteWorkflow 执行工作流
func (c *OrchestratorHTTPClientImpl) ExecuteWorkflow(ctx context.Context, in *ExecuteWorkflowRequest, opts ...http.CallOption) (*ExecuteWorkflowResponse, error) {
	var out ExecuteWorkflowResponse
	pattern := "/v1/workflows/execute"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorExecuteWorkflow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ExecuteWorkflowAsync 异步执行工作流
func (c *OrchestratorHTTPClientImpl) ExecuteWorkflowAsync(ctx context.Context, in *ExecuteWorkflowAsyncRequest, opts ...http.CallOption) (*ExecuteWorkflowAsyncResponse, error) {
	var out ExecuteWorkflowAsyncResponse
	pattern := "/v1/workflows/execute-async"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorExecuteWorkflowAsync))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetServicesHealth 获取服务健康状态
func (c *OrchestratorHTTPClientImpl) GetServicesHealth(ctx context.Context, in *GetServicesHealthRequest, opts ...http.CallOption) (*GetServicesHealthResponse, error) {
	var out GetServicesHealthResponse
	pattern := "/v1/services/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrchestratorGetServicesHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetWorkflowDefinition 获取工作流定义
func (c *OrchestratorHTTPClientImpl) GetWorkflowDefinition(ctx context.Context, in *GetWorkflowDefinitionRequest, opts ...http.CallOption) (*GetWorkflowDefinitionResponse, error) {
	var out GetWorkflowDefinitionResponse
	pattern := "/v1/workflows/definitions/{definition_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrchestratorGetWorkflowDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetWorkflowStatus 获取工作流状态
func (c *OrchestratorHTTPClientImpl) GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...http.CallOption) (*GetWorkflowStatusResponse, error) {
	var out GetWorkflowStatusResponse
	pattern := "/v1/workflows/{workflow_id}/status"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrchestratorGetWorkflowStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck 健康检查
func (c *OrchestratorHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.HealthCheckResponse, error) {
	var out v1.HealthCheckResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrchestratorHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListWorkflowDefinitions 列出工作流定义
func (c *OrchestratorHTTPClientImpl) ListWorkflowDefinitions(ctx context.Context, in *ListWorkflowDefinitionsRequest, opts ...http.CallOption) (*ListWorkflowDefinitionsResponse, error) {
	var out ListWorkflowDefinitionsResponse
	pattern := "/v1/workflows/definitions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOrchestratorListWorkflowDefinitions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ProcessQuery 处理查询请求
func (c *OrchestratorHTTPClientImpl) ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...http.CallOption) (*ProcessQueryResponse, error) {
	var out ProcessQueryResponse
	pattern := "/v1/process/query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorProcessQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateWorkflowDefinition 更新工作流定义
func (c *OrchestratorHTTPClientImpl) UpdateWorkflowDefinition(ctx context.Context, in *UpdateWorkflowDefinitionRequest, opts ...http.CallOption) (*UpdateWorkflowDefinitionResponse, error) {
	var out UpdateWorkflowDefinitionResponse
	pattern := "/v1/workflows/definitions/{definition_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrchestratorUpdateWorkflowDefinition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
