// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: v1/docstore_svc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDocStoreDeleteDocument = "/api.docstore.v1.DocStore/DeleteDocument"
const OperationDocStoreGetChunksByIds = "/api.docstore.v1.DocStore/GetChunksByIds"
const OperationDocStoreGetDocument = "/api.docstore.v1.DocStore/GetDocument"
const OperationDocStoreGetDocumentChunks = "/api.docstore.v1.DocStore/GetDocumentChunks"
const OperationDocStoreGetStorageStats = "/api.docstore.v1.DocStore/GetStorageStats"
const OperationDocStoreHealthCheck = "/api.docstore.v1.DocStore/HealthCheck"
const OperationDocStoreReindexDocument = "/api.docstore.v1.DocStore/ReindexDocument"
const OperationDocStoreSearchHybrid = "/api.docstore.v1.DocStore/SearchHybrid"
const OperationDocStoreSearchSimilar = "/api.docstore.v1.DocStore/SearchSimilar"
const OperationDocStoreUpdateMetadata = "/api.docstore.v1.DocStore/UpdateMetadata"
const OperationDocStoreUploadDocument = "/api.docstore.v1.DocStore/UploadDocument"
const OperationDocStoreUploadDocumentAsync = "/api.docstore.v1.DocStore/UploadDocumentAsync"

type DocStoreHTTPServer interface {
	// DeleteDocument 删除文档
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// GetChunksByIds 根据ID获取分片
	GetChunksByIds(context.Context, *GetChunksByIdsRequest) (*GetChunksByIdsResponse, error)
	// GetDocument 获取文档信息
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// GetDocumentChunks 获取文档分片
	GetDocumentChunks(context.Context, *GetDocumentChunksRequest) (*GetDocumentChunksResponse, error)
	// GetStorageStats 获取存储统计
	GetStorageStats(context.Context, *GetStorageStatsRequest) (*GetStorageStatsResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	// ReindexDocument 重新索引文档
	ReindexDocument(context.Context, *ReindexDocumentRequest) (*ReindexDocumentResponse, error)
	// SearchHybrid 混合检索（向量+关键词）
	SearchHybrid(context.Context, *SearchHybridRequest) (*SearchHybridResponse, error)
	// SearchSimilar 相似度检索
	SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error)
	// UpdateMetadata 更新文档元数据
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error)
	// UploadDocument 文档上传和分片
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	// UploadDocumentAsync 异步文档处理
	UploadDocumentAsync(context.Context, *UploadDocumentAsyncRequest) (*UploadDocumentAsyncResponse, error)
}

func RegisterDocStoreHTTPServer(s *http.Server, srv DocStoreHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/documents", _DocStore_UploadDocument0_HTTP_Handler(srv))
	r.POST("/v1/documents/async", _DocStore_UploadDocumentAsync0_HTTP_Handler(srv))
	r.POST("/v1/search/similar", _DocStore_SearchSimilar0_HTTP_Handler(srv))
	r.POST("/v1/search/hybrid", _DocStore_SearchHybrid0_HTTP_Handler(srv))
	r.GET("/v1/documents/{document_id}", _DocStore_GetDocument0_HTTP_Handler(srv))
	r.GET("/v1/documents/{document_id}/chunks", _DocStore_GetDocumentChunks0_HTTP_Handler(srv))
	r.POST("/v1/chunks/batch", _DocStore_GetChunksByIds0_HTTP_Handler(srv))
	r.DELETE("/v1/documents/{document_id}", _DocStore_DeleteDocument0_HTTP_Handler(srv))
	r.PUT("/v1/documents/{document_id}/metadata", _DocStore_UpdateMetadata0_HTTP_Handler(srv))
	r.POST("/v1/documents/{document_id}/reindex", _DocStore_ReindexDocument0_HTTP_Handler(srv))
	r.GET("/v1/stats/storage", _DocStore_GetStorageStats0_HTTP_Handler(srv))
	r.GET("/v1/health", _DocStore_HealthCheck0_HTTP_Handler(srv))
}

func _DocStore_UploadDocument0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreUploadDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadDocument(ctx, req.(*UploadDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_UploadDocumentAsync0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadDocumentAsyncRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreUploadDocumentAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadDocumentAsync(ctx, req.(*UploadDocumentAsyncRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadDocumentAsyncResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_SearchSimilar0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchSimilarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreSearchSimilar)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchSimilar(ctx, req.(*SearchSimilarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchSimilarResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_SearchHybrid0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchHybridRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreSearchHybrid)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchHybrid(ctx, req.(*SearchHybridRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchHybridResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_GetDocument0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreGetDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocument(ctx, req.(*GetDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_GetDocumentChunks0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDocumentChunksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreGetDocumentChunks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocumentChunks(ctx, req.(*GetDocumentChunksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDocumentChunksResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_GetChunksByIds0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChunksByIdsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreGetChunksByIds)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChunksByIds(ctx, req.(*GetChunksByIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChunksByIdsResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_DeleteDocument0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreDeleteDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDocument(ctx, req.(*DeleteDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_UpdateMetadata0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMetadataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreUpdateMetadata)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMetadataResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_ReindexDocument0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReindexDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreReindexDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReindexDocument(ctx, req.(*ReindexDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReindexDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_GetStorageStats0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStorageStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreGetStorageStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStorageStats(ctx, req.(*GetStorageStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStorageStatsResponse)
		return ctx.Result(200, reply)
	}
}

func _DocStore_HealthCheck0_HTTP_Handler(srv DocStoreHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDocStoreHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type DocStoreHTTPClient interface {
	// DeleteDocument 删除文档
	DeleteDocument(ctx context.Context, req *DeleteDocumentRequest, opts ...http.CallOption) (rsp *DeleteDocumentResponse, err error)
	// GetChunksByIds 根据ID获取分片
	GetChunksByIds(ctx context.Context, req *GetChunksByIdsRequest, opts ...http.CallOption) (rsp *GetChunksByIdsResponse, err error)
	// GetDocument 获取文档信息
	GetDocument(ctx context.Context, req *GetDocumentRequest, opts ...http.CallOption) (rsp *GetDocumentResponse, err error)
	// GetDocumentChunks 获取文档分片
	GetDocumentChunks(ctx context.Context, req *GetDocumentChunksRequest, opts ...http.CallOption) (rsp *GetDocumentChunksResponse, err error)
	// GetStorageStats 获取存储统计
	GetStorageStats(ctx context.Context, req *GetStorageStatsRequest, opts ...http.CallOption) (rsp *GetStorageStatsResponse, err error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.HealthCheckResponse, err error)
	// ReindexDocument 重新索引文档
	ReindexDocument(ctx context.Context, req *ReindexDocumentRequest, opts ...http.CallOption) (rsp *ReindexDocumentResponse, err error)
	// SearchHybrid 混合检索（向量+关键词）
	SearchHybrid(ctx context.Context, req *SearchHybridRequest, opts ...http.CallOption) (rsp *SearchHybridResponse, err error)
	// SearchSimilar 相似度检索
	SearchSimilar(ctx context.Context, req *SearchSimilarRequest, opts ...http.CallOption) (rsp *SearchSimilarResponse, err error)
	// UpdateMetadata 更新文档元数据
	UpdateMetadata(ctx context.Context, req *UpdateMetadataRequest, opts ...http.CallOption) (rsp *UpdateMetadataResponse, err error)
	// UploadDocument 文档上传和分片
	UploadDocument(ctx context.Context, req *UploadDocumentRequest, opts ...http.CallOption) (rsp *UploadDocumentResponse, err error)
	// UploadDocumentAsync 异步文档处理
	UploadDocumentAsync(ctx context.Context, req *UploadDocumentAsyncRequest, opts ...http.CallOption) (rsp *UploadDocumentAsyncResponse, err error)
}

type DocStoreHTTPClientImpl struct {
	cc *http.Client
}

func NewDocStoreHTTPClient(client *http.Client) DocStoreHTTPClient {
	return &DocStoreHTTPClientImpl{client}
}

// DeleteDocument 删除文档
func (c *DocStoreHTTPClientImpl) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...http.CallOption) (*DeleteDocumentResponse, error) {
	var out DeleteDocumentResponse
	pattern := "/v1/documents/{document_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDocStoreDeleteDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetChunksByIds 根据ID获取分片
func (c *DocStoreHTTPClientImpl) GetChunksByIds(ctx context.Context, in *GetChunksByIdsRequest, opts ...http.CallOption) (*GetChunksByIdsResponse, error) {
	var out GetChunksByIdsResponse
	pattern := "/v1/chunks/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreGetChunksByIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetDocument 获取文档信息
func (c *DocStoreHTTPClientImpl) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...http.CallOption) (*GetDocumentResponse, error) {
	var out GetDocumentResponse
	pattern := "/v1/documents/{document_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDocStoreGetDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetDocumentChunks 获取文档分片
func (c *DocStoreHTTPClientImpl) GetDocumentChunks(ctx context.Context, in *GetDocumentChunksRequest, opts ...http.CallOption) (*GetDocumentChunksResponse, error) {
	var out GetDocumentChunksResponse
	pattern := "/v1/documents/{document_id}/chunks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDocStoreGetDocumentChunks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetStorageStats 获取存储统计
func (c *DocStoreHTTPClientImpl) GetStorageStats(ctx context.Context, in *GetStorageStatsRequest, opts ...http.CallOption) (*GetStorageStatsResponse, error) {
	var out GetStorageStatsResponse
	pattern := "/v1/stats/storage"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDocStoreGetStorageStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck 健康检查
func (c *DocStoreHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.HealthCheckResponse, error) {
	var out v1.HealthCheckResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDocStoreHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ReindexDocument 重新索引文档
func (c *DocStoreHTTPClientImpl) ReindexDocument(ctx context.Context, in *ReindexDocumentRequest, opts ...http.CallOption) (*ReindexDocumentResponse, error) {
	var out ReindexDocumentResponse
	pattern := "/v1/documents/{document_id}/reindex"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreReindexDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SearchHybrid 混合检索（向量+关键词）
func (c *DocStoreHTTPClientImpl) SearchHybrid(ctx context.Context, in *SearchHybridRequest, opts ...http.CallOption) (*SearchHybridResponse, error) {
	var out SearchHybridResponse
	pattern := "/v1/search/hybrid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreSearchHybrid))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// SearchSimilar 相似度检索
func (c *DocStoreHTTPClientImpl) SearchSimilar(ctx context.Context, in *SearchSimilarRequest, opts ...http.CallOption) (*SearchSimilarResponse, error) {
	var out SearchSimilarResponse
	pattern := "/v1/search/similar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreSearchSimilar))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateMetadata 更新文档元数据
func (c *DocStoreHTTPClientImpl) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...http.CallOption) (*UpdateMetadataResponse, error) {
	var out UpdateMetadataResponse
	pattern := "/v1/documents/{document_id}/metadata"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreUpdateMetadata))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UploadDocument 文档上传和分片
func (c *DocStoreHTTPClientImpl) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...http.CallOption) (*UploadDocumentResponse, error) {
	var out UploadDocumentResponse
	pattern := "/v1/documents"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreUploadDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UploadDocumentAsync 异步文档处理
func (c *DocStoreHTTPClientImpl) UploadDocumentAsync(ctx context.Context, in *UploadDocumentAsyncRequest, opts ...http.CallOption) (*UploadDocumentAsyncResponse, error) {
	var out UploadDocumentAsyncResponse
	pattern := "/v1/documents/async"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDocStoreUploadDocumentAsync))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
