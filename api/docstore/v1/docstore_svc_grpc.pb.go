// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/docstore_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocStore_UploadDocument_FullMethodName      = "/api.docstore.v1.DocStore/UploadDocument"
	DocStore_UploadDocumentAsync_FullMethodName = "/api.docstore.v1.DocStore/UploadDocumentAsync"
	DocStore_SearchSimilar_FullMethodName       = "/api.docstore.v1.DocStore/SearchSimilar"
	DocStore_SearchHybrid_FullMethodName        = "/api.docstore.v1.DocStore/SearchHybrid"
	DocStore_GetDocument_FullMethodName         = "/api.docstore.v1.DocStore/GetDocument"
	DocStore_GetDocumentChunks_FullMethodName   = "/api.docstore.v1.DocStore/GetDocumentChunks"
	DocStore_GetChunksByIds_FullMethodName      = "/api.docstore.v1.DocStore/GetChunksByIds"
	DocStore_DeleteDocument_FullMethodName      = "/api.docstore.v1.DocStore/DeleteDocument"
	DocStore_UpdateMetadata_FullMethodName      = "/api.docstore.v1.DocStore/UpdateMetadata"
	DocStore_ReindexDocument_FullMethodName     = "/api.docstore.v1.DocStore/ReindexDocument"
	DocStore_GetStorageStats_FullMethodName     = "/api.docstore.v1.DocStore/GetStorageStats"
	DocStore_HealthCheck_FullMethodName         = "/api.docstore.v1.DocStore/HealthCheck"
)

// DocStoreClient is the client API for DocStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DocStore服务 - 文档管理、分片存储和向量检索
type DocStoreClient interface {
	// 文档上传和分片
	UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	// 异步文档处理
	UploadDocumentAsync(ctx context.Context, in *UploadDocumentAsyncRequest, opts ...grpc.CallOption) (*UploadDocumentAsyncResponse, error)
	// 相似度检索
	SearchSimilar(ctx context.Context, in *SearchSimilarRequest, opts ...grpc.CallOption) (*SearchSimilarResponse, error)
	// 混合检索（向量+关键词）
	SearchHybrid(ctx context.Context, in *SearchHybridRequest, opts ...grpc.CallOption) (*SearchHybridResponse, error)
	// 获取文档信息
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// 获取文档分片
	GetDocumentChunks(ctx context.Context, in *GetDocumentChunksRequest, opts ...grpc.CallOption) (*GetDocumentChunksResponse, error)
	// 根据ID获取分片
	GetChunksByIds(ctx context.Context, in *GetChunksByIdsRequest, opts ...grpc.CallOption) (*GetChunksByIdsResponse, error)
	// 删除文档
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// 更新文档元数据
	UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error)
	// 重新索引文档
	ReindexDocument(ctx context.Context, in *ReindexDocumentRequest, opts ...grpc.CallOption) (*ReindexDocumentResponse, error)
	// 获取存储统计
	GetStorageStats(ctx context.Context, in *GetStorageStatsRequest, opts ...grpc.CallOption) (*GetStorageStatsResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type docStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDocStoreClient(cc grpc.ClientConnInterface) DocStoreClient {
	return &docStoreClient{cc}
}

func (c *docStoreClient) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, DocStore_UploadDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) UploadDocumentAsync(ctx context.Context, in *UploadDocumentAsyncRequest, opts ...grpc.CallOption) (*UploadDocumentAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDocumentAsyncResponse)
	err := c.cc.Invoke(ctx, DocStore_UploadDocumentAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) SearchSimilar(ctx context.Context, in *SearchSimilarRequest, opts ...grpc.CallOption) (*SearchSimilarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSimilarResponse)
	err := c.cc.Invoke(ctx, DocStore_SearchSimilar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) SearchHybrid(ctx context.Context, in *SearchHybridRequest, opts ...grpc.CallOption) (*SearchHybridResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchHybridResponse)
	err := c.cc.Invoke(ctx, DocStore_SearchHybrid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, DocStore_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetDocumentChunks(ctx context.Context, in *GetDocumentChunksRequest, opts ...grpc.CallOption) (*GetDocumentChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentChunksResponse)
	err := c.cc.Invoke(ctx, DocStore_GetDocumentChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetChunksByIds(ctx context.Context, in *GetChunksByIdsRequest, opts ...grpc.CallOption) (*GetChunksByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunksByIdsResponse)
	err := c.cc.Invoke(ctx, DocStore_GetChunksByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, DocStore_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) UpdateMetadata(ctx context.Context, in *UpdateMetadataRequest, opts ...grpc.CallOption) (*UpdateMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetadataResponse)
	err := c.cc.Invoke(ctx, DocStore_UpdateMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) ReindexDocument(ctx context.Context, in *ReindexDocumentRequest, opts ...grpc.CallOption) (*ReindexDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReindexDocumentResponse)
	err := c.cc.Invoke(ctx, DocStore_ReindexDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) GetStorageStats(ctx context.Context, in *GetStorageStatsRequest, opts ...grpc.CallOption) (*GetStorageStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStorageStatsResponse)
	err := c.cc.Invoke(ctx, DocStore_GetStorageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docStoreClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, DocStore_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocStoreServer is the server API for DocStore service.
// All implementations must embed UnimplementedDocStoreServer
// for forward compatibility.
//
// DocStore服务 - 文档管理、分片存储和向量检索
type DocStoreServer interface {
	// 文档上传和分片
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	// 异步文档处理
	UploadDocumentAsync(context.Context, *UploadDocumentAsyncRequest) (*UploadDocumentAsyncResponse, error)
	// 相似度检索
	SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error)
	// 混合检索（向量+关键词）
	SearchHybrid(context.Context, *SearchHybridRequest) (*SearchHybridResponse, error)
	// 获取文档信息
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// 获取文档分片
	GetDocumentChunks(context.Context, *GetDocumentChunksRequest) (*GetDocumentChunksResponse, error)
	// 根据ID获取分片
	GetChunksByIds(context.Context, *GetChunksByIdsRequest) (*GetChunksByIdsResponse, error)
	// 删除文档
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// 更新文档元数据
	UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error)
	// 重新索引文档
	ReindexDocument(context.Context, *ReindexDocumentRequest) (*ReindexDocumentResponse, error)
	// 获取存储统计
	GetStorageStats(context.Context, *GetStorageStatsRequest) (*GetStorageStatsResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedDocStoreServer()
}

// UnimplementedDocStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocStoreServer struct{}

func (UnimplementedDocStoreServer) UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedDocStoreServer) UploadDocumentAsync(context.Context, *UploadDocumentAsyncRequest) (*UploadDocumentAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocumentAsync not implemented")
}
func (UnimplementedDocStoreServer) SearchSimilar(context.Context, *SearchSimilarRequest) (*SearchSimilarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSimilar not implemented")
}
func (UnimplementedDocStoreServer) SearchHybrid(context.Context, *SearchHybridRequest) (*SearchHybridResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchHybrid not implemented")
}
func (UnimplementedDocStoreServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocStoreServer) GetDocumentChunks(context.Context, *GetDocumentChunksRequest) (*GetDocumentChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentChunks not implemented")
}
func (UnimplementedDocStoreServer) GetChunksByIds(context.Context, *GetChunksByIdsRequest) (*GetChunksByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunksByIds not implemented")
}
func (UnimplementedDocStoreServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocStoreServer) UpdateMetadata(context.Context, *UpdateMetadataRequest) (*UpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (UnimplementedDocStoreServer) ReindexDocument(context.Context, *ReindexDocumentRequest) (*ReindexDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReindexDocument not implemented")
}
func (UnimplementedDocStoreServer) GetStorageStats(context.Context, *GetStorageStatsRequest) (*GetStorageStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageStats not implemented")
}
func (UnimplementedDocStoreServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDocStoreServer) mustEmbedUnimplementedDocStoreServer() {}
func (UnimplementedDocStoreServer) testEmbeddedByValue()                  {}

// UnsafeDocStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocStoreServer will
// result in compilation errors.
type UnsafeDocStoreServer interface {
	mustEmbedUnimplementedDocStoreServer()
}

func RegisterDocStoreServer(s grpc.ServiceRegistrar, srv DocStoreServer) {
	// If the following call pancis, it indicates UnimplementedDocStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocStore_ServiceDesc, srv)
}

func _DocStore_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_UploadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).UploadDocument(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_UploadDocumentAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).UploadDocumentAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_UploadDocumentAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).UploadDocumentAsync(ctx, req.(*UploadDocumentAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_SearchSimilar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSimilarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).SearchSimilar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_SearchSimilar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).SearchSimilar(ctx, req.(*SearchSimilarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_SearchHybrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchHybridRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).SearchHybrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_SearchHybrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).SearchHybrid(ctx, req.(*SearchHybridRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_GetDocumentChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).GetDocumentChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_GetDocumentChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).GetDocumentChunks(ctx, req.(*GetDocumentChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_GetChunksByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunksByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).GetChunksByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_GetChunksByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).GetChunksByIds(ctx, req.(*GetChunksByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_UpdateMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).UpdateMetadata(ctx, req.(*UpdateMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_ReindexDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReindexDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).ReindexDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_ReindexDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).ReindexDocument(ctx, req.(*ReindexDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_GetStorageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).GetStorageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_GetStorageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).GetStorageStats(ctx, req.(*GetStorageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocStore_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocStoreServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocStore_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocStoreServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DocStore_ServiceDesc is the grpc.ServiceDesc for DocStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.docstore.v1.DocStore",
	HandlerType: (*DocStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDocument",
			Handler:    _DocStore_UploadDocument_Handler,
		},
		{
			MethodName: "UploadDocumentAsync",
			Handler:    _DocStore_UploadDocumentAsync_Handler,
		},
		{
			MethodName: "SearchSimilar",
			Handler:    _DocStore_SearchSimilar_Handler,
		},
		{
			MethodName: "SearchHybrid",
			Handler:    _DocStore_SearchHybrid_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocStore_GetDocument_Handler,
		},
		{
			MethodName: "GetDocumentChunks",
			Handler:    _DocStore_GetDocumentChunks_Handler,
		},
		{
			MethodName: "GetChunksByIds",
			Handler:    _DocStore_GetChunksByIds_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocStore_DeleteDocument_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _DocStore_UpdateMetadata_Handler,
		},
		{
			MethodName: "ReindexDocument",
			Handler:    _DocStore_ReindexDocument_Handler,
		},
		{
			MethodName: "GetStorageStats",
			Handler:    _DocStore_GetStorageStats_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DocStore_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/docstore_svc.proto",
}
