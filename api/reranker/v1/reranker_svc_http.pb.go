// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: v1/reranker_svc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRerankerBenchmarkModel = "/api.reranker.v1.Reranker/BenchmarkModel"
const OperationRerankerConfigureModel = "/api.reranker.v1.Reranker/ConfigureModel"
const OperationRerankerGetModelInfo = "/api.reranker.v1.Reranker/GetModelInfo"
const OperationRerankerHealthCheck = "/api.reranker.v1.Reranker/HealthCheck"
const OperationRerankerListModels = "/api.reranker.v1.Reranker/ListModels"
const OperationRerankerRerankDocuments = "/api.reranker.v1.Reranker/RerankDocuments"
const OperationRerankerScoreBatchRelevance = "/api.reranker.v1.Reranker/ScoreBatchRelevance"
const OperationRerankerScoreRelevance = "/api.reranker.v1.Reranker/ScoreRelevance"

type RerankerHTTPServer interface {
	// BenchmarkModel 模型性能测试
	BenchmarkModel(context.Context, *BenchmarkModelRequest) (*BenchmarkModelResponse, error)
	// ConfigureModel 配置排序模型
	ConfigureModel(context.Context, *ConfigureModelRequest) (*ConfigureModelResponse, error)
	// GetModelInfo 获取模型信息
	GetModelInfo(context.Context, *GetModelInfoRequest) (*GetModelInfoResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	// ListModels 列出可用模型
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// RerankDocuments 文档重排序
	RerankDocuments(context.Context, *RerankDocumentsRequest) (*RerankDocumentsResponse, error)
	// ScoreBatchRelevance 批量相关性评分
	ScoreBatchRelevance(context.Context, *ScoreBatchRelevanceRequest) (*ScoreBatchRelevanceResponse, error)
	// ScoreRelevance 相关性评分
	ScoreRelevance(context.Context, *ScoreRelevanceRequest) (*ScoreRelevanceResponse, error)
}

func RegisterRerankerHTTPServer(s *http.Server, srv RerankerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/rerank/documents", _Reranker_RerankDocuments0_HTTP_Handler(srv))
	r.POST("/v1/score/relevance", _Reranker_ScoreRelevance0_HTTP_Handler(srv))
	r.POST("/v1/score/batch", _Reranker_ScoreBatchRelevance0_HTTP_Handler(srv))
	r.POST("/v1/models/configure", _Reranker_ConfigureModel0_HTTP_Handler(srv))
	r.GET("/v1/models/{model_name}", _Reranker_GetModelInfo0_HTTP_Handler(srv))
	r.GET("/v1/models", _Reranker_ListModels0_HTTP_Handler(srv))
	r.POST("/v1/models/{model_name}/benchmark", _Reranker_BenchmarkModel0_HTTP_Handler(srv))
	r.GET("/v1/health", _Reranker_HealthCheck0_HTTP_Handler(srv))
}

func _Reranker_RerankDocuments0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RerankDocumentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerRerankDocuments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RerankDocuments(ctx, req.(*RerankDocumentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RerankDocumentsResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_ScoreRelevance0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreRelevanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerScoreRelevance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScoreRelevance(ctx, req.(*ScoreRelevanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreRelevanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_ScoreBatchRelevance0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScoreBatchRelevanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerScoreBatchRelevance)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScoreBatchRelevance(ctx, req.(*ScoreBatchRelevanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScoreBatchRelevanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_ConfigureModel0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfigureModelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerConfigureModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfigureModel(ctx, req.(*ConfigureModelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfigureModelResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_GetModelInfo0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetModelInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerGetModelInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetModelInfo(ctx, req.(*GetModelInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetModelInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_ListModels0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListModelsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerListModels)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListModels(ctx, req.(*ListModelsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListModelsResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_BenchmarkModel0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BenchmarkModelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerBenchmarkModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BenchmarkModel(ctx, req.(*BenchmarkModelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BenchmarkModelResponse)
		return ctx.Result(200, reply)
	}
}

func _Reranker_HealthCheck0_HTTP_Handler(srv RerankerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRerankerHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type RerankerHTTPClient interface {
	// BenchmarkModel 模型性能测试
	BenchmarkModel(ctx context.Context, req *BenchmarkModelRequest, opts ...http.CallOption) (rsp *BenchmarkModelResponse, err error)
	// ConfigureModel 配置排序模型
	ConfigureModel(ctx context.Context, req *ConfigureModelRequest, opts ...http.CallOption) (rsp *ConfigureModelResponse, err error)
	// GetModelInfo 获取模型信息
	GetModelInfo(ctx context.Context, req *GetModelInfoRequest, opts ...http.CallOption) (rsp *GetModelInfoResponse, err error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.HealthCheckResponse, err error)
	// ListModels 列出可用模型
	ListModels(ctx context.Context, req *ListModelsRequest, opts ...http.CallOption) (rsp *ListModelsResponse, err error)
	// RerankDocuments 文档重排序
	RerankDocuments(ctx context.Context, req *RerankDocumentsRequest, opts ...http.CallOption) (rsp *RerankDocumentsResponse, err error)
	// ScoreBatchRelevance 批量相关性评分
	ScoreBatchRelevance(ctx context.Context, req *ScoreBatchRelevanceRequest, opts ...http.CallOption) (rsp *ScoreBatchRelevanceResponse, err error)
	// ScoreRelevance 相关性评分
	ScoreRelevance(ctx context.Context, req *ScoreRelevanceRequest, opts ...http.CallOption) (rsp *ScoreRelevanceResponse, err error)
}

type RerankerHTTPClientImpl struct {
	cc *http.Client
}

func NewRerankerHTTPClient(client *http.Client) RerankerHTTPClient {
	return &RerankerHTTPClientImpl{client}
}

// BenchmarkModel 模型性能测试
func (c *RerankerHTTPClientImpl) BenchmarkModel(ctx context.Context, in *BenchmarkModelRequest, opts ...http.CallOption) (*BenchmarkModelResponse, error) {
	var out BenchmarkModelResponse
	pattern := "/v1/models/{model_name}/benchmark"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRerankerBenchmarkModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConfigureModel 配置排序模型
func (c *RerankerHTTPClientImpl) ConfigureModel(ctx context.Context, in *ConfigureModelRequest, opts ...http.CallOption) (*ConfigureModelResponse, error) {
	var out ConfigureModelResponse
	pattern := "/v1/models/configure"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRerankerConfigureModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetModelInfo 获取模型信息
func (c *RerankerHTTPClientImpl) GetModelInfo(ctx context.Context, in *GetModelInfoRequest, opts ...http.CallOption) (*GetModelInfoResponse, error) {
	var out GetModelInfoResponse
	pattern := "/v1/models/{model_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRerankerGetModelInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck 健康检查
func (c *RerankerHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.HealthCheckResponse, error) {
	var out v1.HealthCheckResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRerankerHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ListModels 列出可用模型
func (c *RerankerHTTPClientImpl) ListModels(ctx context.Context, in *ListModelsRequest, opts ...http.CallOption) (*ListModelsResponse, error) {
	var out ListModelsResponse
	pattern := "/v1/models"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRerankerListModels))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RerankDocuments 文档重排序
func (c *RerankerHTTPClientImpl) RerankDocuments(ctx context.Context, in *RerankDocumentsRequest, opts ...http.CallOption) (*RerankDocumentsResponse, error) {
	var out RerankDocumentsResponse
	pattern := "/v1/rerank/documents"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRerankerRerankDocuments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ScoreBatchRelevance 批量相关性评分
func (c *RerankerHTTPClientImpl) ScoreBatchRelevance(ctx context.Context, in *ScoreBatchRelevanceRequest, opts ...http.CallOption) (*ScoreBatchRelevanceResponse, error) {
	var out ScoreBatchRelevanceResponse
	pattern := "/v1/score/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRerankerScoreBatchRelevance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ScoreRelevance 相关性评分
func (c *RerankerHTTPClientImpl) ScoreRelevance(ctx context.Context, in *ScoreRelevanceRequest, opts ...http.CallOption) (*ScoreRelevanceResponse, error) {
	var out ScoreRelevanceResponse
	pattern := "/v1/score/relevance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRerankerScoreRelevance))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
