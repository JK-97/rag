// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/reranker_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Reranker_RerankDocuments_FullMethodName     = "/api.reranker.v1.Reranker/RerankDocuments"
	Reranker_ScoreRelevance_FullMethodName      = "/api.reranker.v1.Reranker/ScoreRelevance"
	Reranker_ScoreBatchRelevance_FullMethodName = "/api.reranker.v1.Reranker/ScoreBatchRelevance"
	Reranker_ConfigureModel_FullMethodName      = "/api.reranker.v1.Reranker/ConfigureModel"
	Reranker_GetModelInfo_FullMethodName        = "/api.reranker.v1.Reranker/GetModelInfo"
	Reranker_ListModels_FullMethodName          = "/api.reranker.v1.Reranker/ListModels"
	Reranker_BenchmarkModel_FullMethodName      = "/api.reranker.v1.Reranker/BenchmarkModel"
	Reranker_HealthCheck_FullMethodName         = "/api.reranker.v1.Reranker/HealthCheck"
)

// RerankerClient is the client API for Reranker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Reranker服务 - 文档重排序和相关性评分
type RerankerClient interface {
	// 文档重排序
	RerankDocuments(ctx context.Context, in *RerankDocumentsRequest, opts ...grpc.CallOption) (*RerankDocumentsResponse, error)
	// 相关性评分
	ScoreRelevance(ctx context.Context, in *ScoreRelevanceRequest, opts ...grpc.CallOption) (*ScoreRelevanceResponse, error)
	// 批量相关性评分
	ScoreBatchRelevance(ctx context.Context, in *ScoreBatchRelevanceRequest, opts ...grpc.CallOption) (*ScoreBatchRelevanceResponse, error)
	// 配置排序模型
	ConfigureModel(ctx context.Context, in *ConfigureModelRequest, opts ...grpc.CallOption) (*ConfigureModelResponse, error)
	// 获取模型信息
	GetModelInfo(ctx context.Context, in *GetModelInfoRequest, opts ...grpc.CallOption) (*GetModelInfoResponse, error)
	// 列出可用模型
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// 模型性能测试
	BenchmarkModel(ctx context.Context, in *BenchmarkModelRequest, opts ...grpc.CallOption) (*BenchmarkModelResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type rerankerClient struct {
	cc grpc.ClientConnInterface
}

func NewRerankerClient(cc grpc.ClientConnInterface) RerankerClient {
	return &rerankerClient{cc}
}

func (c *rerankerClient) RerankDocuments(ctx context.Context, in *RerankDocumentsRequest, opts ...grpc.CallOption) (*RerankDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RerankDocumentsResponse)
	err := c.cc.Invoke(ctx, Reranker_RerankDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) ScoreRelevance(ctx context.Context, in *ScoreRelevanceRequest, opts ...grpc.CallOption) (*ScoreRelevanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreRelevanceResponse)
	err := c.cc.Invoke(ctx, Reranker_ScoreRelevance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) ScoreBatchRelevance(ctx context.Context, in *ScoreBatchRelevanceRequest, opts ...grpc.CallOption) (*ScoreBatchRelevanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScoreBatchRelevanceResponse)
	err := c.cc.Invoke(ctx, Reranker_ScoreBatchRelevance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) ConfigureModel(ctx context.Context, in *ConfigureModelRequest, opts ...grpc.CallOption) (*ConfigureModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureModelResponse)
	err := c.cc.Invoke(ctx, Reranker_ConfigureModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) GetModelInfo(ctx context.Context, in *GetModelInfoRequest, opts ...grpc.CallOption) (*GetModelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelInfoResponse)
	err := c.cc.Invoke(ctx, Reranker_GetModelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, Reranker_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) BenchmarkModel(ctx context.Context, in *BenchmarkModelRequest, opts ...grpc.CallOption) (*BenchmarkModelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BenchmarkModelResponse)
	err := c.cc.Invoke(ctx, Reranker_BenchmarkModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rerankerClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Reranker_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RerankerServer is the server API for Reranker service.
// All implementations must embed UnimplementedRerankerServer
// for forward compatibility.
//
// Reranker服务 - 文档重排序和相关性评分
type RerankerServer interface {
	// 文档重排序
	RerankDocuments(context.Context, *RerankDocumentsRequest) (*RerankDocumentsResponse, error)
	// 相关性评分
	ScoreRelevance(context.Context, *ScoreRelevanceRequest) (*ScoreRelevanceResponse, error)
	// 批量相关性评分
	ScoreBatchRelevance(context.Context, *ScoreBatchRelevanceRequest) (*ScoreBatchRelevanceResponse, error)
	// 配置排序模型
	ConfigureModel(context.Context, *ConfigureModelRequest) (*ConfigureModelResponse, error)
	// 获取模型信息
	GetModelInfo(context.Context, *GetModelInfoRequest) (*GetModelInfoResponse, error)
	// 列出可用模型
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// 模型性能测试
	BenchmarkModel(context.Context, *BenchmarkModelRequest) (*BenchmarkModelResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedRerankerServer()
}

// UnimplementedRerankerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRerankerServer struct{}

func (UnimplementedRerankerServer) RerankDocuments(context.Context, *RerankDocumentsRequest) (*RerankDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerankDocuments not implemented")
}
func (UnimplementedRerankerServer) ScoreRelevance(context.Context, *ScoreRelevanceRequest) (*ScoreRelevanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreRelevance not implemented")
}
func (UnimplementedRerankerServer) ScoreBatchRelevance(context.Context, *ScoreBatchRelevanceRequest) (*ScoreBatchRelevanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoreBatchRelevance not implemented")
}
func (UnimplementedRerankerServer) ConfigureModel(context.Context, *ConfigureModelRequest) (*ConfigureModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureModel not implemented")
}
func (UnimplementedRerankerServer) GetModelInfo(context.Context, *GetModelInfoRequest) (*GetModelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedRerankerServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedRerankerServer) BenchmarkModel(context.Context, *BenchmarkModelRequest) (*BenchmarkModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchmarkModel not implemented")
}
func (UnimplementedRerankerServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRerankerServer) mustEmbedUnimplementedRerankerServer() {}
func (UnimplementedRerankerServer) testEmbeddedByValue()                  {}

// UnsafeRerankerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RerankerServer will
// result in compilation errors.
type UnsafeRerankerServer interface {
	mustEmbedUnimplementedRerankerServer()
}

func RegisterRerankerServer(s grpc.ServiceRegistrar, srv RerankerServer) {
	// If the following call pancis, it indicates UnimplementedRerankerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reranker_ServiceDesc, srv)
}

func _Reranker_RerankDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RerankDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).RerankDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_RerankDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).RerankDocuments(ctx, req.(*RerankDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_ScoreRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).ScoreRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_ScoreRelevance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).ScoreRelevance(ctx, req.(*ScoreRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_ScoreBatchRelevance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreBatchRelevanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).ScoreBatchRelevance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_ScoreBatchRelevance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).ScoreBatchRelevance(ctx, req.(*ScoreBatchRelevanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_ConfigureModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).ConfigureModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_ConfigureModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).ConfigureModel(ctx, req.(*ConfigureModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_GetModelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).GetModelInfo(ctx, req.(*GetModelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_BenchmarkModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).BenchmarkModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_BenchmarkModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).BenchmarkModel(ctx, req.(*BenchmarkModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reranker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RerankerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reranker_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RerankerServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Reranker_ServiceDesc is the grpc.ServiceDesc for Reranker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reranker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.reranker.v1.Reranker",
	HandlerType: (*RerankerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RerankDocuments",
			Handler:    _Reranker_RerankDocuments_Handler,
		},
		{
			MethodName: "ScoreRelevance",
			Handler:    _Reranker_ScoreRelevance_Handler,
		},
		{
			MethodName: "ScoreBatchRelevance",
			Handler:    _Reranker_ScoreBatchRelevance_Handler,
		},
		{
			MethodName: "ConfigureModel",
			Handler:    _Reranker_ConfigureModel_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _Reranker_GetModelInfo_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Reranker_ListModels_Handler,
		},
		{
			MethodName: "BenchmarkModel",
			Handler:    _Reranker_BenchmarkModel_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Reranker_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/reranker_svc.proto",
}
