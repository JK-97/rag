// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/assembler_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assembler_AssembleContext_FullMethodName       = "/api.assembler.v1.Assembler/AssembleContext"
	Assembler_EstimateTokens_FullMethodName        = "/api.assembler.v1.Assembler/EstimateTokens"
	Assembler_OptimizeContent_FullMethodName       = "/api.assembler.v1.Assembler/OptimizeContent"
	Assembler_SplitContent_FullMethodName          = "/api.assembler.v1.Assembler/SplitContent"
	Assembler_RenderTemplate_FullMethodName        = "/api.assembler.v1.Assembler/RenderTemplate"
	Assembler_AssembleBatchContexts_FullMethodName = "/api.assembler.v1.Assembler/AssembleBatchContexts"
	Assembler_ListTemplates_FullMethodName         = "/api.assembler.v1.Assembler/ListTemplates"
	Assembler_HealthCheck_FullMethodName           = "/api.assembler.v1.Assembler/HealthCheck"
)

// AssemblerClient is the client API for Assembler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Assembler服务 - 上下文构建和Token管理
type AssemblerClient interface {
	// 构建上下文
	AssembleContext(ctx context.Context, in *AssembleContextRequest, opts ...grpc.CallOption) (*AssembleContextResponse, error)
	// 估算Token数量
	EstimateTokens(ctx context.Context, in *EstimateTokensRequest, opts ...grpc.CallOption) (*EstimateTokensResponse, error)
	// 内容优化
	OptimizeContent(ctx context.Context, in *OptimizeContentRequest, opts ...grpc.CallOption) (*OptimizeContentResponse, error)
	// 分割长文本
	SplitContent(ctx context.Context, in *SplitContentRequest, opts ...grpc.CallOption) (*SplitContentResponse, error)
	// 模板渲染
	RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error)
	// 批量上下文构建
	AssembleBatchContexts(ctx context.Context, in *AssembleBatchContextsRequest, opts ...grpc.CallOption) (*AssembleBatchContextsResponse, error)
	// 获取模板列表
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type assemblerClient struct {
	cc grpc.ClientConnInterface
}

func NewAssemblerClient(cc grpc.ClientConnInterface) AssemblerClient {
	return &assemblerClient{cc}
}

func (c *assemblerClient) AssembleContext(ctx context.Context, in *AssembleContextRequest, opts ...grpc.CallOption) (*AssembleContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssembleContextResponse)
	err := c.cc.Invoke(ctx, Assembler_AssembleContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) EstimateTokens(ctx context.Context, in *EstimateTokensRequest, opts ...grpc.CallOption) (*EstimateTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateTokensResponse)
	err := c.cc.Invoke(ctx, Assembler_EstimateTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) OptimizeContent(ctx context.Context, in *OptimizeContentRequest, opts ...grpc.CallOption) (*OptimizeContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizeContentResponse)
	err := c.cc.Invoke(ctx, Assembler_OptimizeContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) SplitContent(ctx context.Context, in *SplitContentRequest, opts ...grpc.CallOption) (*SplitContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SplitContentResponse)
	err := c.cc.Invoke(ctx, Assembler_SplitContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) RenderTemplate(ctx context.Context, in *RenderTemplateRequest, opts ...grpc.CallOption) (*RenderTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenderTemplateResponse)
	err := c.cc.Invoke(ctx, Assembler_RenderTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) AssembleBatchContexts(ctx context.Context, in *AssembleBatchContextsRequest, opts ...grpc.CallOption) (*AssembleBatchContextsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssembleBatchContextsResponse)
	err := c.cc.Invoke(ctx, Assembler_AssembleBatchContexts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, Assembler_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assemblerClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Assembler_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssemblerServer is the server API for Assembler service.
// All implementations must embed UnimplementedAssemblerServer
// for forward compatibility.
//
// Assembler服务 - 上下文构建和Token管理
type AssemblerServer interface {
	// 构建上下文
	AssembleContext(context.Context, *AssembleContextRequest) (*AssembleContextResponse, error)
	// 估算Token数量
	EstimateTokens(context.Context, *EstimateTokensRequest) (*EstimateTokensResponse, error)
	// 内容优化
	OptimizeContent(context.Context, *OptimizeContentRequest) (*OptimizeContentResponse, error)
	// 分割长文本
	SplitContent(context.Context, *SplitContentRequest) (*SplitContentResponse, error)
	// 模板渲染
	RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error)
	// 批量上下文构建
	AssembleBatchContexts(context.Context, *AssembleBatchContextsRequest) (*AssembleBatchContextsResponse, error)
	// 获取模板列表
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedAssemblerServer()
}

// UnimplementedAssemblerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssemblerServer struct{}

func (UnimplementedAssemblerServer) AssembleContext(context.Context, *AssembleContextRequest) (*AssembleContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssembleContext not implemented")
}
func (UnimplementedAssemblerServer) EstimateTokens(context.Context, *EstimateTokensRequest) (*EstimateTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateTokens not implemented")
}
func (UnimplementedAssemblerServer) OptimizeContent(context.Context, *OptimizeContentRequest) (*OptimizeContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeContent not implemented")
}
func (UnimplementedAssemblerServer) SplitContent(context.Context, *SplitContentRequest) (*SplitContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitContent not implemented")
}
func (UnimplementedAssemblerServer) RenderTemplate(context.Context, *RenderTemplateRequest) (*RenderTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTemplate not implemented")
}
func (UnimplementedAssemblerServer) AssembleBatchContexts(context.Context, *AssembleBatchContextsRequest) (*AssembleBatchContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssembleBatchContexts not implemented")
}
func (UnimplementedAssemblerServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedAssemblerServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAssemblerServer) mustEmbedUnimplementedAssemblerServer() {}
func (UnimplementedAssemblerServer) testEmbeddedByValue()                   {}

// UnsafeAssemblerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssemblerServer will
// result in compilation errors.
type UnsafeAssemblerServer interface {
	mustEmbedUnimplementedAssemblerServer()
}

func RegisterAssemblerServer(s grpc.ServiceRegistrar, srv AssemblerServer) {
	// If the following call pancis, it indicates UnimplementedAssemblerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assembler_ServiceDesc, srv)
}

func _Assembler_AssembleContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssembleContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).AssembleContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_AssembleContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).AssembleContext(ctx, req.(*AssembleContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_EstimateTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).EstimateTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_EstimateTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).EstimateTokens(ctx, req.(*EstimateTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_OptimizeContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).OptimizeContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_OptimizeContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).OptimizeContent(ctx, req.(*OptimizeContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_SplitContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).SplitContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_SplitContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).SplitContent(ctx, req.(*SplitContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_RenderTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).RenderTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_RenderTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).RenderTemplate(ctx, req.(*RenderTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_AssembleBatchContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssembleBatchContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).AssembleBatchContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_AssembleBatchContexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).AssembleBatchContexts(ctx, req.(*AssembleBatchContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assembler_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssemblerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assembler_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssemblerServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Assembler_ServiceDesc is the grpc.ServiceDesc for Assembler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assembler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.assembler.v1.Assembler",
	HandlerType: (*AssemblerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssembleContext",
			Handler:    _Assembler_AssembleContext_Handler,
		},
		{
			MethodName: "EstimateTokens",
			Handler:    _Assembler_EstimateTokens_Handler,
		},
		{
			MethodName: "OptimizeContent",
			Handler:    _Assembler_OptimizeContent_Handler,
		},
		{
			MethodName: "SplitContent",
			Handler:    _Assembler_SplitContent_Handler,
		},
		{
			MethodName: "RenderTemplate",
			Handler:    _Assembler_RenderTemplate_Handler,
		},
		{
			MethodName: "AssembleBatchContexts",
			Handler:    _Assembler_AssembleBatchContexts_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _Assembler_ListTemplates_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Assembler_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/assembler_svc.proto",
}
