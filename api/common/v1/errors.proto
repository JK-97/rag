syntax = "proto3";

package api.common.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "rag/api/common/v1;v1";

// 错误码枚举
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  
  // 客户端错误 (400-499)
  ERROR_CODE_BAD_REQUEST = 400;
  ERROR_CODE_UNAUTHORIZED = 401;
  ERROR_CODE_FORBIDDEN = 403;
  ERROR_CODE_NOT_FOUND = 404;
  ERROR_CODE_METHOD_NOT_ALLOWED = 405;
  ERROR_CODE_CONFLICT = 409;
  ERROR_CODE_UNPROCESSABLE_ENTITY = 422;
  ERROR_CODE_TOO_MANY_REQUESTS = 429;
  
  // 服务端错误 (500-599)
  ERROR_CODE_INTERNAL_SERVER_ERROR = 500;
  ERROR_CODE_NOT_IMPLEMENTED = 501;
  ERROR_CODE_BAD_GATEWAY = 502;
  ERROR_CODE_SERVICE_UNAVAILABLE = 503;
  ERROR_CODE_GATEWAY_TIMEOUT = 504;
  
  // 业务逻辑错误 (1000+)
  ERROR_CODE_INVALID_QUERY = 1001;
  ERROR_CODE_DOCUMENT_NOT_FOUND = 1002;
  ERROR_CODE_EMBEDDING_FAILED = 1003;
  ERROR_CODE_PROCESSING_FAILED = 1004;
  ERROR_CODE_QUOTA_EXCEEDED = 1005;
  ERROR_CODE_MODEL_NOT_AVAILABLE = 1006;
  ERROR_CODE_INVALID_DOCUMENT_FORMAT = 1007;
  ERROR_CODE_CHUNK_TOO_LARGE = 1008;
  ERROR_CODE_RERANKING_FAILED = 1009;
  ERROR_CODE_ASSEMBLY_FAILED = 1010;
  ERROR_CODE_WORKFLOW_FAILED = 1011;
}

// 错误详情
message ErrorDetail {
  string field = 1;
  string code = 2;
  string message = 3;
  google.protobuf.Any metadata = 4;
}

// 错误响应
message ErrorResponse {
  ErrorCode code = 1;
  string message = 2;
  repeated ErrorDetail details = 3;
  string request_id = 4;
  google.protobuf.Timestamp timestamp = 5;
  string service = 6;
  map<string, string> metadata = 7;
}

// 验证错误
message ValidationError {
  string field = 1;
  string constraint = 2;
  string message = 3;
  google.protobuf.Any value = 4;
}

// 服务错误信息
message ServiceError {
  string service_name = 1;
  string service_version = 2;
  ErrorCode error_code = 3;
  string error_message = 4;
  repeated ErrorDetail details = 5;
  google.protobuf.Timestamp occurred_at = 6;
  string trace_id = 7;
  string span_id = 8;
}

// 降级响应
message FallbackResponse {
  string reason = 1;
  string fallback_type = 2; // "cache", "default", "simplified"
  google.protobuf.Any data = 3;
  google.protobuf.Timestamp fallback_at = 4;
}

// 重试信息
message RetryInfo {
  int32 retry_count = 1;
  int32 max_retries = 2;
  int64 next_retry_delay_ms = 3;
  string backoff_strategy = 4; // "fixed", "exponential", "linear"
}