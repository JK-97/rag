// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/embedding_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Embedding_EmbedText_FullMethodName              = "/api.embedding.v1.Embedding/EmbedText"
	Embedding_EmbedBatch_FullMethodName             = "/api.embedding.v1.Embedding/EmbedBatch"
	Embedding_EmbedBatchAsync_FullMethodName        = "/api.embedding.v1.Embedding/EmbedBatchAsync"
	Embedding_GetEmbeddingTaskStatus_FullMethodName = "/api.embedding.v1.Embedding/GetEmbeddingTaskStatus"
	Embedding_GetModelInfo_FullMethodName           = "/api.embedding.v1.Embedding/GetModelInfo"
	Embedding_ListModels_FullMethodName             = "/api.embedding.v1.Embedding/ListModels"
	Embedding_ComputeSimilarity_FullMethodName      = "/api.embedding.v1.Embedding/ComputeSimilarity"
	Embedding_HealthCheck_FullMethodName            = "/api.embedding.v1.Embedding/HealthCheck"
)

// EmbeddingClient is the client API for Embedding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Embedding服务 - 文本向量化、批量处理和模型管理
type EmbeddingClient interface {
	// 文本向量化
	EmbedText(ctx context.Context, in *EmbedTextRequest, opts ...grpc.CallOption) (*EmbedTextResponse, error)
	// 批量向量化
	EmbedBatch(ctx context.Context, in *EmbedBatchRequest, opts ...grpc.CallOption) (*EmbedBatchResponse, error)
	// 异步批量向量化
	EmbedBatchAsync(ctx context.Context, in *EmbedBatchAsyncRequest, opts ...grpc.CallOption) (*EmbedBatchAsyncResponse, error)
	// 获取异步任务状态
	GetEmbeddingTaskStatus(ctx context.Context, in *GetEmbeddingTaskStatusRequest, opts ...grpc.CallOption) (*GetEmbeddingTaskStatusResponse, error)
	// 获取模型信息
	GetModelInfo(ctx context.Context, in *GetModelInfoRequest, opts ...grpc.CallOption) (*GetModelInfoResponse, error)
	// 列出可用模型
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// 计算相似度
	ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type embeddingClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingClient(cc grpc.ClientConnInterface) EmbeddingClient {
	return &embeddingClient{cc}
}

func (c *embeddingClient) EmbedText(ctx context.Context, in *EmbedTextRequest, opts ...grpc.CallOption) (*EmbedTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedTextResponse)
	err := c.cc.Invoke(ctx, Embedding_EmbedText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) EmbedBatch(ctx context.Context, in *EmbedBatchRequest, opts ...grpc.CallOption) (*EmbedBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedBatchResponse)
	err := c.cc.Invoke(ctx, Embedding_EmbedBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) EmbedBatchAsync(ctx context.Context, in *EmbedBatchAsyncRequest, opts ...grpc.CallOption) (*EmbedBatchAsyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbedBatchAsyncResponse)
	err := c.cc.Invoke(ctx, Embedding_EmbedBatchAsync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) GetEmbeddingTaskStatus(ctx context.Context, in *GetEmbeddingTaskStatusRequest, opts ...grpc.CallOption) (*GetEmbeddingTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmbeddingTaskStatusResponse)
	err := c.cc.Invoke(ctx, Embedding_GetEmbeddingTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) GetModelInfo(ctx context.Context, in *GetModelInfoRequest, opts ...grpc.CallOption) (*GetModelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelInfoResponse)
	err := c.cc.Invoke(ctx, Embedding_GetModelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, Embedding_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) ComputeSimilarity(ctx context.Context, in *ComputeSimilarityRequest, opts ...grpc.CallOption) (*ComputeSimilarityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComputeSimilarityResponse)
	err := c.cc.Invoke(ctx, Embedding_ComputeSimilarity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Embedding_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingServer is the server API for Embedding service.
// All implementations must embed UnimplementedEmbeddingServer
// for forward compatibility.
//
// Embedding服务 - 文本向量化、批量处理和模型管理
type EmbeddingServer interface {
	// 文本向量化
	EmbedText(context.Context, *EmbedTextRequest) (*EmbedTextResponse, error)
	// 批量向量化
	EmbedBatch(context.Context, *EmbedBatchRequest) (*EmbedBatchResponse, error)
	// 异步批量向量化
	EmbedBatchAsync(context.Context, *EmbedBatchAsyncRequest) (*EmbedBatchAsyncResponse, error)
	// 获取异步任务状态
	GetEmbeddingTaskStatus(context.Context, *GetEmbeddingTaskStatusRequest) (*GetEmbeddingTaskStatusResponse, error)
	// 获取模型信息
	GetModelInfo(context.Context, *GetModelInfoRequest) (*GetModelInfoResponse, error)
	// 列出可用模型
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// 计算相似度
	ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedEmbeddingServer()
}

// UnimplementedEmbeddingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmbeddingServer struct{}

func (UnimplementedEmbeddingServer) EmbedText(context.Context, *EmbedTextRequest) (*EmbedTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedText not implemented")
}
func (UnimplementedEmbeddingServer) EmbedBatch(context.Context, *EmbedBatchRequest) (*EmbedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedBatch not implemented")
}
func (UnimplementedEmbeddingServer) EmbedBatchAsync(context.Context, *EmbedBatchAsyncRequest) (*EmbedBatchAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedBatchAsync not implemented")
}
func (UnimplementedEmbeddingServer) GetEmbeddingTaskStatus(context.Context, *GetEmbeddingTaskStatusRequest) (*GetEmbeddingTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmbeddingTaskStatus not implemented")
}
func (UnimplementedEmbeddingServer) GetModelInfo(context.Context, *GetModelInfoRequest) (*GetModelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInfo not implemented")
}
func (UnimplementedEmbeddingServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedEmbeddingServer) ComputeSimilarity(context.Context, *ComputeSimilarityRequest) (*ComputeSimilarityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSimilarity not implemented")
}
func (UnimplementedEmbeddingServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedEmbeddingServer) mustEmbedUnimplementedEmbeddingServer() {}
func (UnimplementedEmbeddingServer) testEmbeddedByValue()                   {}

// UnsafeEmbeddingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingServer will
// result in compilation errors.
type UnsafeEmbeddingServer interface {
	mustEmbedUnimplementedEmbeddingServer()
}

func RegisterEmbeddingServer(s grpc.ServiceRegistrar, srv EmbeddingServer) {
	// If the following call pancis, it indicates UnimplementedEmbeddingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Embedding_ServiceDesc, srv)
}

func _Embedding_EmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).EmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_EmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).EmbedText(ctx, req.(*EmbedTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_EmbedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).EmbedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_EmbedBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).EmbedBatch(ctx, req.(*EmbedBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_EmbedBatchAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedBatchAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).EmbedBatchAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_EmbedBatchAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).EmbedBatchAsync(ctx, req.(*EmbedBatchAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_GetEmbeddingTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmbeddingTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).GetEmbeddingTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_GetEmbeddingTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).GetEmbeddingTaskStatus(ctx, req.(*GetEmbeddingTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_GetModelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).GetModelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_GetModelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).GetModelInfo(ctx, req.(*GetModelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_ComputeSimilarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeSimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).ComputeSimilarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_ComputeSimilarity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).ComputeSimilarity(ctx, req.(*ComputeSimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Embedding_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Embedding_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Embedding_ServiceDesc is the grpc.ServiceDesc for Embedding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Embedding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.embedding.v1.Embedding",
	HandlerType: (*EmbeddingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmbedText",
			Handler:    _Embedding_EmbedText_Handler,
		},
		{
			MethodName: "EmbedBatch",
			Handler:    _Embedding_EmbedBatch_Handler,
		},
		{
			MethodName: "EmbedBatchAsync",
			Handler:    _Embedding_EmbedBatchAsync_Handler,
		},
		{
			MethodName: "GetEmbeddingTaskStatus",
			Handler:    _Embedding_GetEmbeddingTaskStatus_Handler,
		},
		{
			MethodName: "GetModelInfo",
			Handler:    _Embedding_GetModelInfo_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _Embedding_ListModels_Handler,
		},
		{
			MethodName: "ComputeSimilarity",
			Handler:    _Embedding_ComputeSimilarity_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Embedding_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/embedding_svc.proto",
}
