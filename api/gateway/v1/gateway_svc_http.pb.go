// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: v1/gateway_svc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayDeleteDocument = "/api.gateway.v1.Gateway/DeleteDocument"
const OperationGatewayGetDocument = "/api.gateway.v1.Gateway/GetDocument"
const OperationGatewayHealthCheck = "/api.gateway.v1.Gateway/HealthCheck"
const OperationGatewayListDocuments = "/api.gateway.v1.Gateway/ListDocuments"
const OperationGatewayLogin = "/api.gateway.v1.Gateway/Login"
const OperationGatewayQuery = "/api.gateway.v1.Gateway/Query"
const OperationGatewayRefreshToken = "/api.gateway.v1.Gateway/RefreshToken"
const OperationGatewayUpdateDocumentMetadata = "/api.gateway.v1.Gateway/UpdateDocumentMetadata"
const OperationGatewayUploadDocument = "/api.gateway.v1.Gateway/UploadDocument"

type GatewayHTTPServer interface {
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// Login 用户认证
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Query 智能问答查询
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	UpdateDocumentMetadata(context.Context, *UpdateDocumentMetadataRequest) (*UpdateDocumentMetadataResponse, error)
	// UploadDocument 文档管理
	UploadDocument(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/auth/login", _Gateway_Login0_HTTP_Handler(srv))
	r.POST("/v1/auth/refresh", _Gateway_RefreshToken0_HTTP_Handler(srv))
	r.POST("/v1/query", _Gateway_Query0_HTTP_Handler(srv))
	r.POST("/v1/documents", _Gateway_UploadDocument0_HTTP_Handler(srv))
	r.GET("/v1/documents/{document_id}", _Gateway_GetDocument0_HTTP_Handler(srv))
	r.DELETE("/v1/documents/{document_id}", _Gateway_DeleteDocument0_HTTP_Handler(srv))
	r.GET("/v1/documents", _Gateway_ListDocuments0_HTTP_Handler(srv))
	r.PUT("/v1/documents/{document_id}/metadata", _Gateway_UpdateDocumentMetadata0_HTTP_Handler(srv))
	r.GET("/v1/health", _Gateway_HealthCheck0_HTTP_Handler(srv))
}

func _Gateway_Login0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_RefreshToken0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_Query0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Query(ctx, req.(*QueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueryResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UploadDocument0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUploadDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadDocument(ctx, req.(*UploadDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GetDocument0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocument(ctx, req.(*GetDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_DeleteDocument0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayDeleteDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDocument(ctx, req.(*DeleteDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDocumentResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_ListDocuments0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDocumentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayListDocuments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDocuments(ctx, req.(*ListDocumentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDocumentsResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_UpdateDocumentMetadata0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDocumentMetadataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayUpdateDocumentMetadata)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDocumentMetadata(ctx, req.(*UpdateDocumentMetadataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDocumentMetadataResponse)
		return ctx.Result(200, reply)
	}
}

func _Gateway_HealthCheck0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	DeleteDocument(ctx context.Context, req *DeleteDocumentRequest, opts ...http.CallOption) (rsp *DeleteDocumentResponse, err error)
	GetDocument(ctx context.Context, req *GetDocumentRequest, opts ...http.CallOption) (rsp *GetDocumentResponse, err error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.HealthCheckResponse, err error)
	ListDocuments(ctx context.Context, req *ListDocumentsRequest, opts ...http.CallOption) (rsp *ListDocumentsResponse, err error)
	// Login 用户认证
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	// Query 智能问答查询
	Query(ctx context.Context, req *QueryRequest, opts ...http.CallOption) (rsp *QueryResponse, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenRequest, opts ...http.CallOption) (rsp *RefreshTokenResponse, err error)
	UpdateDocumentMetadata(ctx context.Context, req *UpdateDocumentMetadataRequest, opts ...http.CallOption) (rsp *UpdateDocumentMetadataResponse, err error)
	// UploadDocument 文档管理
	UploadDocument(ctx context.Context, req *UploadDocumentRequest, opts ...http.CallOption) (rsp *UploadDocumentResponse, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...http.CallOption) (*DeleteDocumentResponse, error) {
	var out DeleteDocumentResponse
	pattern := "/v1/documents/{document_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayDeleteDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...http.CallOption) (*GetDocumentResponse, error) {
	var out GetDocumentResponse
	pattern := "/v1/documents/{document_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayGetDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck 健康检查
func (c *GatewayHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.HealthCheckResponse, error) {
	var out v1.HealthCheckResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...http.CallOption) (*ListDocumentsResponse, error) {
	var out ListDocumentsResponse
	pattern := "/v1/documents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayListDocuments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Login 用户认证
func (c *GatewayHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/auth/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Query 智能问答查询
func (c *GatewayHTTPClientImpl) Query(ctx context.Context, in *QueryRequest, opts ...http.CallOption) (*QueryResponse, error) {
	var out QueryResponse
	pattern := "/v1/query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...http.CallOption) (*RefreshTokenResponse, error) {
	var out RefreshTokenResponse
	pattern := "/v1/auth/refresh"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) UpdateDocumentMetadata(ctx context.Context, in *UpdateDocumentMetadataRequest, opts ...http.CallOption) (*UpdateDocumentMetadataResponse, error) {
	var out UpdateDocumentMetadataResponse
	pattern := "/v1/documents/{document_id}/metadata"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUpdateDocumentMetadata))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UploadDocument 文档管理
func (c *GatewayHTTPClientImpl) UploadDocument(ctx context.Context, in *UploadDocumentRequest, opts ...http.CallOption) (*UploadDocumentResponse, error) {
	var out UploadDocumentResponse
	pattern := "/v1/documents"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayUploadDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
