// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: v1/preprocessor_svc.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPreprocessorExpandSynonyms = "/api.preprocessor.v1.Preprocessor/ExpandSynonyms"
const OperationPreprocessorGetProcessorConfig = "/api.preprocessor.v1.Preprocessor/GetProcessorConfig"
const OperationPreprocessorHealthCheck = "/api.preprocessor.v1.Preprocessor/HealthCheck"
const OperationPreprocessorProcessBatchQueries = "/api.preprocessor.v1.Preprocessor/ProcessBatchQueries"
const OperationPreprocessorProcessQuery = "/api.preprocessor.v1.Preprocessor/ProcessQuery"
const OperationPreprocessorRewriteQuery = "/api.preprocessor.v1.Preprocessor/RewriteQuery"
const OperationPreprocessorUpdateProcessorConfig = "/api.preprocessor.v1.Preprocessor/UpdateProcessorConfig"

type PreprocessorHTTPServer interface {
	// ExpandSynonyms 同义词扩展
	ExpandSynonyms(context.Context, *ExpandSynonymsRequest) (*ExpandSynonymsResponse, error)
	// GetProcessorConfig 获取处理器配置
	GetProcessorConfig(context.Context, *emptypb.Empty) (*ProcessorConfigResponse, error)
	// HealthCheck 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	// ProcessBatchQueries 批量查询处理
	ProcessBatchQueries(context.Context, *ProcessBatchQueriesRequest) (*ProcessBatchQueriesResponse, error)
	// ProcessQuery 查询预处理
	ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error)
	// RewriteQuery 查询改写
	RewriteQuery(context.Context, *RewriteQueryRequest) (*RewriteQueryResponse, error)
	// UpdateProcessorConfig 更新处理器配置
	UpdateProcessorConfig(context.Context, *UpdateProcessorConfigRequest) (*ProcessorConfigResponse, error)
}

func RegisterPreprocessorHTTPServer(s *http.Server, srv PreprocessorHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/process-query", _Preprocessor_ProcessQuery0_HTTP_Handler(srv))
	r.POST("/v1/rewrite-query", _Preprocessor_RewriteQuery0_HTTP_Handler(srv))
	r.POST("/v1/expand-synonyms", _Preprocessor_ExpandSynonyms0_HTTP_Handler(srv))
	r.POST("/v1/process-batch", _Preprocessor_ProcessBatchQueries0_HTTP_Handler(srv))
	r.GET("/v1/config", _Preprocessor_GetProcessorConfig0_HTTP_Handler(srv))
	r.PUT("/v1/config", _Preprocessor_UpdateProcessorConfig0_HTTP_Handler(srv))
	r.GET("/v1/health", _Preprocessor_HealthCheck0_HTTP_Handler(srv))
}

func _Preprocessor_ProcessQuery0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorProcessQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessQuery(ctx, req.(*ProcessQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessQueryResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_RewriteQuery0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RewriteQueryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorRewriteQuery)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RewriteQuery(ctx, req.(*RewriteQueryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RewriteQueryResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_ExpandSynonyms0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExpandSynonymsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorExpandSynonyms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExpandSynonyms(ctx, req.(*ExpandSynonymsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExpandSynonymsResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_ProcessBatchQueries0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProcessBatchQueriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorProcessBatchQueries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessBatchQueries(ctx, req.(*ProcessBatchQueriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessBatchQueriesResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_GetProcessorConfig0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorGetProcessorConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProcessorConfig(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessorConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_UpdateProcessorConfig0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProcessorConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorUpdateProcessorConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProcessorConfig(ctx, req.(*UpdateProcessorConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ProcessorConfigResponse)
		return ctx.Result(200, reply)
	}
}

func _Preprocessor_HealthCheck0_HTTP_Handler(srv PreprocessorHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPreprocessorHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HealthCheckResponse)
		return ctx.Result(200, reply)
	}
}

type PreprocessorHTTPClient interface {
	// ExpandSynonyms 同义词扩展
	ExpandSynonyms(ctx context.Context, req *ExpandSynonymsRequest, opts ...http.CallOption) (rsp *ExpandSynonymsResponse, err error)
	// GetProcessorConfig 获取处理器配置
	GetProcessorConfig(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ProcessorConfigResponse, err error)
	// HealthCheck 健康检查
	HealthCheck(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *v1.HealthCheckResponse, err error)
	// ProcessBatchQueries 批量查询处理
	ProcessBatchQueries(ctx context.Context, req *ProcessBatchQueriesRequest, opts ...http.CallOption) (rsp *ProcessBatchQueriesResponse, err error)
	// ProcessQuery 查询预处理
	ProcessQuery(ctx context.Context, req *ProcessQueryRequest, opts ...http.CallOption) (rsp *ProcessQueryResponse, err error)
	// RewriteQuery 查询改写
	RewriteQuery(ctx context.Context, req *RewriteQueryRequest, opts ...http.CallOption) (rsp *RewriteQueryResponse, err error)
	// UpdateProcessorConfig 更新处理器配置
	UpdateProcessorConfig(ctx context.Context, req *UpdateProcessorConfigRequest, opts ...http.CallOption) (rsp *ProcessorConfigResponse, err error)
}

type PreprocessorHTTPClientImpl struct {
	cc *http.Client
}

func NewPreprocessorHTTPClient(client *http.Client) PreprocessorHTTPClient {
	return &PreprocessorHTTPClientImpl{client}
}

// ExpandSynonyms 同义词扩展
func (c *PreprocessorHTTPClientImpl) ExpandSynonyms(ctx context.Context, in *ExpandSynonymsRequest, opts ...http.CallOption) (*ExpandSynonymsResponse, error) {
	var out ExpandSynonymsResponse
	pattern := "/v1/expand-synonyms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPreprocessorExpandSynonyms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// GetProcessorConfig 获取处理器配置
func (c *PreprocessorHTTPClientImpl) GetProcessorConfig(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ProcessorConfigResponse, error) {
	var out ProcessorConfigResponse
	pattern := "/v1/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPreprocessorGetProcessorConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// HealthCheck 健康检查
func (c *PreprocessorHTTPClientImpl) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*v1.HealthCheckResponse, error) {
	var out v1.HealthCheckResponse
	pattern := "/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPreprocessorHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ProcessBatchQueries 批量查询处理
func (c *PreprocessorHTTPClientImpl) ProcessBatchQueries(ctx context.Context, in *ProcessBatchQueriesRequest, opts ...http.CallOption) (*ProcessBatchQueriesResponse, error) {
	var out ProcessBatchQueriesResponse
	pattern := "/v1/process-batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPreprocessorProcessBatchQueries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ProcessQuery 查询预处理
func (c *PreprocessorHTTPClientImpl) ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...http.CallOption) (*ProcessQueryResponse, error) {
	var out ProcessQueryResponse
	pattern := "/v1/process-query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPreprocessorProcessQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// RewriteQuery 查询改写
func (c *PreprocessorHTTPClientImpl) RewriteQuery(ctx context.Context, in *RewriteQueryRequest, opts ...http.CallOption) (*RewriteQueryResponse, error) {
	var out RewriteQueryResponse
	pattern := "/v1/rewrite-query"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPreprocessorRewriteQuery))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// UpdateProcessorConfig 更新处理器配置
func (c *PreprocessorHTTPClientImpl) UpdateProcessorConfig(ctx context.Context, in *UpdateProcessorConfigRequest, opts ...http.CallOption) (*ProcessorConfigResponse, error) {
	var out ProcessorConfigResponse
	pattern := "/v1/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPreprocessorUpdateProcessorConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
