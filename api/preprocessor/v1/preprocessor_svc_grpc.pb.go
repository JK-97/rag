// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: v1/preprocessor_svc.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "rag/api/common/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Preprocessor_ProcessQuery_FullMethodName          = "/api.preprocessor.v1.Preprocessor/ProcessQuery"
	Preprocessor_RewriteQuery_FullMethodName          = "/api.preprocessor.v1.Preprocessor/RewriteQuery"
	Preprocessor_ExpandSynonyms_FullMethodName        = "/api.preprocessor.v1.Preprocessor/ExpandSynonyms"
	Preprocessor_ProcessBatchQueries_FullMethodName   = "/api.preprocessor.v1.Preprocessor/ProcessBatchQueries"
	Preprocessor_GetProcessorConfig_FullMethodName    = "/api.preprocessor.v1.Preprocessor/GetProcessorConfig"
	Preprocessor_UpdateProcessorConfig_FullMethodName = "/api.preprocessor.v1.Preprocessor/UpdateProcessorConfig"
	Preprocessor_HealthCheck_FullMethodName           = "/api.preprocessor.v1.Preprocessor/HealthCheck"
)

// PreprocessorClient is the client API for Preprocessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Preprocessor服务 - 查询预处理、改写和扩展
type PreprocessorClient interface {
	// 查询预处理
	ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...grpc.CallOption) (*ProcessQueryResponse, error)
	// 查询改写
	RewriteQuery(ctx context.Context, in *RewriteQueryRequest, opts ...grpc.CallOption) (*RewriteQueryResponse, error)
	// 同义词扩展
	ExpandSynonyms(ctx context.Context, in *ExpandSynonymsRequest, opts ...grpc.CallOption) (*ExpandSynonymsResponse, error)
	// 批量查询处理
	ProcessBatchQueries(ctx context.Context, in *ProcessBatchQueriesRequest, opts ...grpc.CallOption) (*ProcessBatchQueriesResponse, error)
	// 获取处理器配置
	GetProcessorConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProcessorConfigResponse, error)
	// 更新处理器配置
	UpdateProcessorConfig(ctx context.Context, in *UpdateProcessorConfigRequest, opts ...grpc.CallOption) (*ProcessorConfigResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error)
}

type preprocessorClient struct {
	cc grpc.ClientConnInterface
}

func NewPreprocessorClient(cc grpc.ClientConnInterface) PreprocessorClient {
	return &preprocessorClient{cc}
}

func (c *preprocessorClient) ProcessQuery(ctx context.Context, in *ProcessQueryRequest, opts ...grpc.CallOption) (*ProcessQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessQueryResponse)
	err := c.cc.Invoke(ctx, Preprocessor_ProcessQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) RewriteQuery(ctx context.Context, in *RewriteQueryRequest, opts ...grpc.CallOption) (*RewriteQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RewriteQueryResponse)
	err := c.cc.Invoke(ctx, Preprocessor_RewriteQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) ExpandSynonyms(ctx context.Context, in *ExpandSynonymsRequest, opts ...grpc.CallOption) (*ExpandSynonymsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpandSynonymsResponse)
	err := c.cc.Invoke(ctx, Preprocessor_ExpandSynonyms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) ProcessBatchQueries(ctx context.Context, in *ProcessBatchQueriesRequest, opts ...grpc.CallOption) (*ProcessBatchQueriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessBatchQueriesResponse)
	err := c.cc.Invoke(ctx, Preprocessor_ProcessBatchQueries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) GetProcessorConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ProcessorConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessorConfigResponse)
	err := c.cc.Invoke(ctx, Preprocessor_GetProcessorConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) UpdateProcessorConfig(ctx context.Context, in *UpdateProcessorConfigRequest, opts ...grpc.CallOption) (*ProcessorConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessorConfigResponse)
	err := c.cc.Invoke(ctx, Preprocessor_UpdateProcessorConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preprocessorClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Preprocessor_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreprocessorServer is the server API for Preprocessor service.
// All implementations must embed UnimplementedPreprocessorServer
// for forward compatibility.
//
// Preprocessor服务 - 查询预处理、改写和扩展
type PreprocessorServer interface {
	// 查询预处理
	ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error)
	// 查询改写
	RewriteQuery(context.Context, *RewriteQueryRequest) (*RewriteQueryResponse, error)
	// 同义词扩展
	ExpandSynonyms(context.Context, *ExpandSynonymsRequest) (*ExpandSynonymsResponse, error)
	// 批量查询处理
	ProcessBatchQueries(context.Context, *ProcessBatchQueriesRequest) (*ProcessBatchQueriesResponse, error)
	// 获取处理器配置
	GetProcessorConfig(context.Context, *emptypb.Empty) (*ProcessorConfigResponse, error)
	// 更新处理器配置
	UpdateProcessorConfig(context.Context, *UpdateProcessorConfigRequest) (*ProcessorConfigResponse, error)
	// 健康检查
	HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error)
	mustEmbedUnimplementedPreprocessorServer()
}

// UnimplementedPreprocessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPreprocessorServer struct{}

func (UnimplementedPreprocessorServer) ProcessQuery(context.Context, *ProcessQueryRequest) (*ProcessQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessQuery not implemented")
}
func (UnimplementedPreprocessorServer) RewriteQuery(context.Context, *RewriteQueryRequest) (*RewriteQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewriteQuery not implemented")
}
func (UnimplementedPreprocessorServer) ExpandSynonyms(context.Context, *ExpandSynonymsRequest) (*ExpandSynonymsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpandSynonyms not implemented")
}
func (UnimplementedPreprocessorServer) ProcessBatchQueries(context.Context, *ProcessBatchQueriesRequest) (*ProcessBatchQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessBatchQueries not implemented")
}
func (UnimplementedPreprocessorServer) GetProcessorConfig(context.Context, *emptypb.Empty) (*ProcessorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessorConfig not implemented")
}
func (UnimplementedPreprocessorServer) UpdateProcessorConfig(context.Context, *UpdateProcessorConfigRequest) (*ProcessorConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessorConfig not implemented")
}
func (UnimplementedPreprocessorServer) HealthCheck(context.Context, *emptypb.Empty) (*v1.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPreprocessorServer) mustEmbedUnimplementedPreprocessorServer() {}
func (UnimplementedPreprocessorServer) testEmbeddedByValue()                      {}

// UnsafePreprocessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreprocessorServer will
// result in compilation errors.
type UnsafePreprocessorServer interface {
	mustEmbedUnimplementedPreprocessorServer()
}

func RegisterPreprocessorServer(s grpc.ServiceRegistrar, srv PreprocessorServer) {
	// If the following call pancis, it indicates UnimplementedPreprocessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Preprocessor_ServiceDesc, srv)
}

func _Preprocessor_ProcessQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).ProcessQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_ProcessQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).ProcessQuery(ctx, req.(*ProcessQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_RewriteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewriteQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).RewriteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_RewriteQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).RewriteQuery(ctx, req.(*RewriteQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_ExpandSynonyms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandSynonymsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).ExpandSynonyms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_ExpandSynonyms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).ExpandSynonyms(ctx, req.(*ExpandSynonymsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_ProcessBatchQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessBatchQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).ProcessBatchQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_ProcessBatchQueries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).ProcessBatchQueries(ctx, req.(*ProcessBatchQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_GetProcessorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).GetProcessorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_GetProcessorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).GetProcessorConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_UpdateProcessorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessorConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).UpdateProcessorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_UpdateProcessorConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).UpdateProcessorConfig(ctx, req.(*UpdateProcessorConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preprocessor_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreprocessorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Preprocessor_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreprocessorServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Preprocessor_ServiceDesc is the grpc.ServiceDesc for Preprocessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Preprocessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.preprocessor.v1.Preprocessor",
	HandlerType: (*PreprocessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessQuery",
			Handler:    _Preprocessor_ProcessQuery_Handler,
		},
		{
			MethodName: "RewriteQuery",
			Handler:    _Preprocessor_RewriteQuery_Handler,
		},
		{
			MethodName: "ExpandSynonyms",
			Handler:    _Preprocessor_ExpandSynonyms_Handler,
		},
		{
			MethodName: "ProcessBatchQueries",
			Handler:    _Preprocessor_ProcessBatchQueries_Handler,
		},
		{
			MethodName: "GetProcessorConfig",
			Handler:    _Preprocessor_GetProcessorConfig_Handler,
		},
		{
			MethodName: "UpdateProcessorConfig",
			Handler:    _Preprocessor_UpdateProcessorConfig_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Preprocessor_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/preprocessor_svc.proto",
}
